{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  let show = false;\n  let canvas;\n  let score = 0;\n  const brickRowCount = 9;\n  const brickColumnCount = 5;\n  const delay = 500;\n  const bricks = [];\n\n  const handleShowRules = () => {\n    show = !show;\n  };\n\n  onMount(() => {\n    const ctx = canvas.getContext('2d');\n\n    const ball = {\n      x: canvas.width / 2,\n      y: canvas.height / 2,\n      size: 10,\n      speed: 4,\n      dx: 4,\n      dy: -4,\n      visible: true,\n    };\n\n    const paddle = {\n      x: canvas.width / 2 - 40,\n      y: canvas.height - 20,\n      w: 80,\n      h: 10,\n      speed: 8,\n      dx: 0,\n      visible: true,\n    };\n\n    const brickInfo = {\n      w: 70,\n      h: 20,\n      padding: 10,\n      offsetX: 45,\n      offsetY: 60,\n      visible: true,\n    };\n\n    for (let i = 0; i < brickRowCount; i++) {\n      bricks[i] = [];\n      for (let j = 0; j < brickColumnCount; j++) {\n        const x = i * (brickInfo.w + brickInfo.padding) + brickInfo.offsetX;\n        const y = j * (brickInfo.h + brickInfo.padding) + brickInfo.offsetY;\n        bricks[i][j] = { x, y, ...brickInfo };\n      }\n    }\n\n    const drawBall = () => {\n      ctx.beginPath();\n      ctx.arc(ball.x, ball.y, ball.size, 0, Math.PI * 2);\n      ctx.fillStyle = ball.visible ? '#0095dd' : 'transparent';\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    const drawPaddle = () => {\n      ctx.beginPath();\n      ctx.rect(paddle.x, paddle.y, paddle.w, paddle.h);\n      ctx.fillStyle = paddle.visible ? '#0095dd' : 'transparent';\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    const drawScore = () => {\n      ctx.font = '20px Arial';\n      ctx.fillText(`Score: ${score}`, canvas.width - 100, 30);\n    };\n\n    const drawBricks = () => {\n      bricks.forEach((column) => {\n        column.forEach((brick) => {\n          ctx.beginPath();\n          ctx.rect(brick.x, brick.y, brick.w, brick.h);\n          ctx.fillStyle = brick.visible ? '#0095dd' : 'transparent';\n          ctx.fill();\n          ctx.closePath();\n        });\n      });\n    };\n\n    const movePaddle = () => {\n      paddle.x += paddle.dx;\n\n      if (paddle.x + paddle.w > canvas.width) {\n        paddle.x = canvas.width - paddle.w;\n      }\n\n      if (paddle.x < 0) {\n        paddle.x = 0;\n      }\n    };\n\n    const moveBall = () => {\n      ball.x += ball.dx;\n      ball.y += ball.dy;\n\n      if (ball.x + ball.size > canvas.width || ball.x - ball.size < 0) {\n        ball.dx *= -1;\n      }\n\n      if (ball.y + ball.size > canvas.height || ball.y - ball.size < 0) {\n        ball.dy *= -1;\n      }\n\n      if (\n        ball.x - ball.size > paddle.x &&\n        ball.x + ball.size < paddle.x + paddle.w &&\n        ball.y + ball.size > paddle.y\n      ) {\n        ball.dy = -ball.speed;\n      }\n\n      bricks.forEach((column) => {\n        column.forEach((brick) => {\n          if (brick.visible) {\n            if (\n              ball.x - ball.size > brick.x &&\n              ball.x + ball.size < brick.x + brick.w &&\n              ball.y + ball.size > brick.y &&\n              ball.y - ball.size < brick.y + brick.h\n            ) {\n              ball.dy *= -1;\n              brick.visible = false;\n\n              increaseScore();\n            }\n          }\n        });\n      });\n\n      if (ball.y + ball.size > canvas.height) {\n        showAllBricks();\n        score = 0;\n      }\n    };\n\n    const increaseScore = () => {\n      score++;\n\n      if (score % (brickRowCount * brickColumnCount) === 0) {\n        ball.visible = false;\n        paddle.visible = false;\n\n        setTimeout(function () {\n          showAllBricks();\n          score = 0;\n          paddle.x = canvas.width / 2 - 40;\n          paddle.y = canvas.height - 20;\n          ball.x = canvas.width / 2;\n          ball.y = canvas.height / 2;\n          ball.visible = true;\n          paddle.visible = true;\n        }, delay);\n      }\n    };\n\n    const showAllBricks = () => {\n      bricks.forEach((column) => {\n        column.forEach((brick) => (brick.visible = true));\n      });\n    };\n\n    const draw = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      drawBall();\n      drawPaddle();\n      drawScore();\n      drawBricks();\n    };\n\n    const update = () => {\n      movePaddle();\n      moveBall();\n\n      draw();\n\n      requestAnimationFrame(update);\n    };\n\n    update();\n\n    const keyDown = (e) => {\n      if (e.key === 'Right' || e.key === 'ArrowRight') {\n        paddle.dx = paddle.speed;\n      } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\n        paddle.dx = -paddle.speed;\n      }\n    };\n\n    const keyUp = (e) => {\n      if (\n        e.key === 'Right' ||\n        e.key === 'ArrowRight' ||\n        e.key === 'Left' ||\n        e.key === 'ArrowLeft'\n      ) {\n        paddle.dx = 0;\n      }\n    };\n\n    document.addEventListener('keydown', keyDown);\n    document.addEventListener('keyup', keyUp);\n  });\n</script>\n\n<style>\n  main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n\n  h1 {\n    font-size: 45px;\n    color: #fff;\n  }\n\n  canvas {\n    background: #f0f0f0;\n    display: block;\n    border-radius: 5px;\n  }\n\n  .btn {\n    cursor: pointer;\n    border: 0;\n    padding: 10px 20px;\n    background: #000;\n    color: #fff;\n    border-radius: 5px;\n  }\n\n  .btn:focus {\n    outline: 0;\n  }\n\n  .btn:hover {\n    background: #222;\n  }\n\n  .btn:active {\n    transform: scale(0.98);\n  }\n\n  .rules-btn {\n    position: absolute;\n    top: 30px;\n    left: 30px;\n  }\n\n  .rules {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: #333;\n    color: #fff;\n    min-height: 100vh;\n    width: 400px;\n    padding: 20px;\n    line-height: 1.5;\n    transform: translateX(-400px);\n    transition: transform 1s ease-in-out;\n  }\n\n  .show {\n    transform: translateX(0);\n  }\n</style>\n\n<main>\n  <h1>Breakout!</h1>\n  <button id=\"rules-btn\" class=\"btn rules-btn\" on:click={handleShowRules}>Show\n    Rules</button>\n  <div id=\"rules\" class=\"rules\" class:show>\n    <h2>How To Play:</h2>\n    <p>\n      Use your right and left keys to move the paddle to bounce the ball up and\n      break the blocks.\n    </p>\n    <p>If you miss the ball, your score and the blocks will reset.</p>\n    <button id=\"close-btn\" class=\"btn\" on:click={handleShowRules}>Close</button>\n  </div>\n\n  <canvas id=\"canvas\" width=\"800\" height=\"600\" bind:this={canvas} />\n</main>\n"
  ],
  "names": [],
  "mappings": "AAuNE,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,UAAU,AAC3C,CAAC,AAED,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,AACb,CAAC,AAED,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,mBAAI,MAAM,AAAC,CAAC,AACV,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,mBAAI,MAAM,AAAC,CAAC,AACV,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,mBAAI,OAAO,AAAC,CAAC,AACX,SAAS,CAAE,MAAM,IAAI,CAAC,AACxB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,WAAW,MAAM,CAAC,CAC7B,UAAU,CAAE,SAAS,CAAC,EAAE,CAAC,WAAW,AACtC,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,WAAW,CAAC,CAAC,AAC1B,CAAC"
}